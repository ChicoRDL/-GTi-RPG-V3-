----------------------------------------->>
-- GTI: Grand Theft International
-- Date: 04 Mar 2014
-- Resource: GTIgroups/ranks.slua
-- Type: Server Side
-- Author: JT Pennington (JTPenn)
----------------------------------------->>

-- Add Group Rank
------------------>>

function addGroupRank(groupID, rankName, permissions, rankType)
		-- Is Group Valid?
	local isGroup = getGroupData(groupID, "display_name")
	if (not isGroup) then return false end
		-- Add Rank to Database
	local rankID = getNextGroupRankSlot()
	setGroupRankData(rankID, "group_id", groupID)
		-- Add Display Name
	setGroupRankData(rankID, "name", rankName)
		-- Add Permissions Set
	if (type(permissions) ~= "table") then
		permissions = getDefaultPermissionSet("New Member")
	end
	permissions = table.concat(permissions, ",")
	setGroupRankData(rankID, "permissions", permissions)
	
		-- Make Default Rank?
	if (rankType == "default") then
		setGroupRankData(rankID, "isDefault", 1)
	else
		setGroupRankData(rankID, "isDefault", 0)
	end
		-- Make Leader Rank?
	if (rankType == "leader") then
		setGroupRankData(rankID, "isLeader", 1)
	else
		setGroupRankData(rankID, "isLeader", 0)
	end
	
		-- Rank by Group Association
	if not (RanksByGroup[groupID]) then RanksByGroup[groupID] = {} end
	table.insert(RanksByGroup[groupID], rankID)
	return true
end

function deleteGroupRank(rankID)
	if (not rankID or type(rankID) ~= "number" or rankID > getNextGroupRankSlot()-1) then return false end
	local groupID = getRankGroup(rankID)
	local defRank = getDefaultRank(groupID)
	for i,account in ipairs(getGroupMembers(groupID)) do
		local account = getAccount(account)
		if (getGroupMemberData(account, "rank_id") == rankID) then
			setGroupMemberData(account, "rank_id", defRank)
		end
	end
	dropGroupRankData(rankID)
	return true
end

-- Call Group Rank
------------------->>

function getGroupRanks(groupID, inOrder)
	if (not groupID or type(groupID) ~= "number") then return false end
	if (not inOrder) then
		return RanksByGroup[groupID] or {}
	else
		local ranks = {}	-- Ranks Table
		local added = {}	-- Record of Added Ranks
		
		-- Start with Ranks in DB Storage
		local rankOrder = getGroupData(groupID, "rank_order") or ""
		rankOrder = split(rankOrder, ",")
			-- Add Ranks in Table
		for i,rankID in ipairs(rankOrder) do
			rankID = tonumber(rankID)
			-- In case of possible screw-ups
			if (getRankGroup(rankID) == groupID) then
				if (getGroupRankData(rankID, "isLeader") ~= 1 and getGroupRankData(rankID, "isDefault") ~= 1) then
					table.insert(ranks, rankID)
					added[rankID] = true
				end
			end
		end
		
		local def_rank
			-- Add Leader/Default Ranks
		for i,rankID in ipairs(RanksByGroup[groupID] or {}) do
			if (getGroupRankData(rankID, "isLeader") == 1) then
				table.insert(ranks, 1, rankID)
				added[rankID] = true
			elseif (getGroupRankData(rankID, "isDefault") == 1) then
				def_rank = rankID
				added[rankID] = true
			elseif (not added[rankID]) then
				table.insert(ranks, rankID)
				added[rankID] = true
			end
		end
		table.insert(ranks, def_rank)
		return ranks
	end
end

function getGroupRankIDByName(groupID, rankName)
	local ranks = getGroupRanks(groupID)
	for i,rankID in ipairs(ranks) do
		local rName = getGroupRankData(rankID, "name")
		if (rName == rankName) then 
			return rankID
		end
	end
	return false
end

function getDefaultRank(groupID)
	if (not groupID or type(groupID) ~= "number") then return false end
	local ranks = getGroupRanks(groupID)
	for i,rankID in ipairs(ranks) do
		local default = getGroupRankData(rankID, "isDefault")
		if (default == 1) then return rankID end
	end
	return false
end

-- Rank Ordering
----------------->>

function sortGroupRanks(groupID, ranks)
	if (not groupID or type(groupID) ~= "number") then return false end
	if (not ranks or type(ranks) ~= "table") then return false end
	ranks = table.concat(ranks, ",")
	setGroupData(groupID, "rank_order", ranks)
	return true
end

function getSeniorRank(groupID, rankID1, rankID2)
	if (not groupID or type(groupID) ~= "number") then return false end
	if (not rankID1 or type(rankID1) ~= "number") then return false end
	if (not rankID2 or type(rankID2) ~= "number") then return false end
	if (rankID1 == rankID2) then return false end
	
	for i,rankID in ipairs(getGroupRanks(groupID, true)) do
		if (rankID == rankID1) then
			return rankID1
		elseif (rankID == rankID2) then
			return rankID2
		end
	end
	return false
end

-- Manage Rank Info
-------------------->>

function getRankGroup(rankID)
	if (not rankID or type(rankID) ~= "number") then return false end
	return getGroupRankData(rankID, "group_id")
end

function getRankName(rankID)
	if (not rankID or type(rankID) ~= "number") then return false end
	return getGroupRankData(rankID, "name")
end

function setRankName(rankID, name)
	if (not rankID or type(rankID) ~= "number" or rankID > getNextGroupRankSlot()-1) then return false end
	if (not name or type(name) ~= "string") then return false end
	setGroupRankData(rankID, "name", name)
	return true
end	

-- Player Rank
--------------->>

function getPlayerGroupRank(player)
	if (not player or not isElement(player) or 
		getElementType(player) ~= "player") then return false end
	
	local account = getPlayerAccount(player)
	local rankID = getGroupMemberData(account, "rank_id") or false
	return rankID
end

function setPlayerGroupRank(player, rankID)
	if (not player or not rankID) then return false end
	if (not isElement(player) or getElementType(player) ~= "player" 
		or type(rankID) ~= "number") then return false end
	
	local account = getPlayerAccount(player)
	setGroupMemberData(account, "rank_id", rankID)
	return true
end
